// Copyright 2015 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Gulp tasks for processing and compiling frontend JavaScript files.
 */
import gulp from 'gulp';
import gulpAngularTemplatecache from 'gulp-angular-templatecache';
import gulpClosureCompiler from 'gulp-closure-compiler';
import gulpMinifyHtml from 'gulp-minify-html';
import lodash from 'lodash';
import path from 'path';

import conf from './conf';


/**
 * Base Closure Compiler config to be extended in, e.g., prod or dev config.
 */
const closureCompilerBaseConfig = {
  // "foo_flag: null" means that a flag is enabled.
  compilerFlags: {
    angular_pass: null,
    closure_entry_point: 'module$src$app$frontend$index_module',
    export_local_property_definitions: null,
    generate_exports: null,
    js_module_root: conf.paths.frontendSrc,
    language_in: 'ECMASCRIPT6_STRICT',
    language_out: 'ECMASCRIPT3',
    manage_closure_dependencies: true
  },
  compilerPath: path.join(conf.paths.nodeModules, 'google-closure-compiler/compiler.jar'),
  // This makes the compiler faster. Requires Java 7+.
  tieredCompilation: true
};


/**
 * Compiles frontend JavaScript files into development bundle located in {conf.paths.serve}
 * directory. This has to be done because currently browsers do not handle ES6 syntax and
 * modules correctly.
 *
 * Note that 'create-serve-folders' task is required because closure compiler source maps function
 * requires the folders to exist upfront.
 */
gulp.task('scripts', ['create-serve-folders'], function() {
  let bundleBaseName = 'app-dev';
  let closureCompilerConfig = lodash.merge({
      fileName: `${bundleBaseName}.js`,
      compilerFlags: {
        // WHITESPACE_ONLY is not an option because it leaves ES6 modules unmodified. ES6 modules
        // arent handled by browsers correctly (yet).
        compilation_level: 'SIMPLE_OPTIMIZATIONS',
        create_source_map: path.join(conf.paths.serve, `${bundleBaseName}.js.map`),
        // Make source map URLs relative to frontend source directory.
        source_map_location_mapping: path.relative(conf.paths.base, conf.paths.frontendSrc) + '|',
        // Include source map in the output bundle.
        output_wrapper: '%output%\n//# sourceMappingURL=' + `${bundleBaseName}.js.map`
      }
    }, closureCompilerBaseConfig);

  return gulp.src(path.join(conf.paths.frontendSrc, '**/*.js'))
    .pipe(gulpClosureCompiler(closureCompilerConfig))
    .pipe(gulp.dest(conf.paths.serve))
});


/**
 * Compiles frontend JavaScript files into production bundle located in {conf.paths.prodTmp}
 * directory.
 */
 gulp.task('scripts:prod', ['angular-templates'], function() {
  let bundleBaseName = 'app';

  let closureCompilerConfig = lodash.merge({
      fileName: 'app.js',
      compilerFlags: {
        compilation_level: 'ADVANCED_OPTIMIZATIONS',
        externs: [
          path.join(conf.paths.nodeModules,
              'google-closure-compiler/contrib/externs/angular-1.4.js'),
          path.join(conf.paths.nodeModules,
              'google-closure-compiler/contrib/externs/angular-1.4-http-promise_templated.js'),
          path.join(conf.paths.nodeModules,
              'google-closure-compiler/contrib/externs/angular-1.4-q_templated.js'),
          path.join(conf.paths.externs, '**/*.js'),
        ],
        // Enable all compiler checks by default and make them errors.
        jscomp_error: '*',
        // Disable checks that are not applicable to the project.
        jscomp_off: [
          // This check does not work correctly with ES6.
          'inferredConstCheck',
          // Let ESLint handle all lint checks.
          'lintChecks'
        ],
        use_types_for_optimization: null
      }
    }, closureCompilerBaseConfig);

  return gulp.src([
      // Application source files.
      path.join(conf.paths.frontendSrc, '**/*.js'),
      // Partials generated by other tasks, e.g., Angular templates.
      path.join(conf.paths.partials, '**/*.js'),
      // Include base.js to enable some compiler functions, e.g., @export annotation handling.
      path.join(conf.paths.bowerComponents,
          'google-closure-library/closure/goog/base.js')
    ])
    .pipe(gulpClosureCompiler(closureCompilerConfig))
    .pipe(gulp.dest(conf.paths.prodTmp));
});


/**
 * Compiles Angular HTML template files into one JS file that serves them through $templateCache.
 */
gulp.task('angular-templates', function () {
  return gulp.src(path.join(conf.paths.frontendSrc, '**/!(index).html'))
    .pipe(gulpMinifyHtml({
      empty: true,
      spare: true,
      quotes: true
    }))
    .pipe(gulpAngularTemplatecache('angular-templates.js', {
      module: conf.frontend.rootModuleName
    }))
    .pipe(gulp.dest(conf.paths.partials));
});


/**
 * Creates {conf.paths.serve} folder.
 */
gulp.task('create-serve-folders', function () {
  return gulp.src('').pipe(gulp.dest(conf.paths.serve));
});


/**
 * Lints all projects code files. This includes frontend source code, as well as, build scripts.
 */
gulp.task('lint', function () {
  return gulp.src([path.join(conf.paths.src, '**/*.js'), path.join(conf.paths.build, '**/*.js')])
    // Attach lint output to the eslint property of the file. 
    .pipe(gulpEslint())
    // Output the lint results to the console.
    .pipe(gulpEslint.format())
    // Exit with an error code (1) on a lint error. 
    .pipe(gulpEslint.failOnError());
});
